OS Lab Assignment 5
Subject : Operating System
Name : Aditya Nath Deepak
Roll no : 10
PRN: 12311201
Division: SY CS-A
Batch : 3
Problem statements :
Implement : 1) Bankers Algo and 2) Deadlock detection algorithm
Topic : W.A.P. for Deadlock detection algorithm
Deadlock detection algorithm:
Code:
#include <stdio.h>
#define MAX_PROCESSES 10
#define MAX_RESOURCES 5
int main() {
int i, j, k, n, m;
int Allocation[MAX_PROCESSES][MAX_RESOURCES],
Request[MAX_PROCESSES][MAX_RESOURCES],
Available[MAX_RESOURCES];
int Work[MAX_RESOURCES], Finish[MAX_PROCESSES],
deadlocked[MAX_PROCESSES],
safeSequence[MAX_PROCESSES];
int deadlock_count = 0, seq_index = 0;
printf("Enter the number of processes (n): ");
scanf("%d", &n);
printf("Enter the number of resources (m): ");
scanf("%d", &m);
printf("Enter the Allocation matrix:\n");
for (i = 0; i < n; i++) {
for (j = 0; j < m; j++) {
scanf("%d", &Allocation[i][j]);
}
}
printf("Enter the Request matrix:\n");
for (i = 0; i < n; i++) {
for (j = 0; j < m; j++) {
scanf("%d", &Request[i][j]);
}
}
printf("Enter the Available vector:\n");
for (j = 0; j < m; j++) {
scanf("%d", &Available[j]);
}
for (j = 0; j < m; j++) {
Work[j] = Available[j];
}
for (i = 0; i < n; i++) {
Finish[i] = 0;
}
int process_completed;
do {
process_completed = 0;
for (i = 0; i < n; i++) {
if (!Finish[i]) {
int can_satisfy = 1;
for (j = 0; j < m; j++) {
if (Request[i][j] > Work[j]) {
can_satisfy = 0;
break;
}
}
if (can_satisfy) {
for (j = 0; j < m; j++) {
Work[j] += Allocation[i][j];
}
Finish[i] = 1;
safeSequence[seq_index++] = i;
process_completed = 1;
}
}
}
} while (process_completed);
for (i = 0; i < n; i++) {
if (!Finish[i]) {
deadlocked[deadlock_count++] = i;
}
}
if (deadlock_count == 0) {
printf("No deadlock detected.\n");
printf("Safe sequence is: ");
for (i = 0; i < seq_index; i++) {
printf("P%d ", safeSequence[i]);
}
printf("\n");
} else {
printf("Deadlock detected in processes: ");
for (i = 0; i < deadlock_count; i++) {
printf("%d ", deadlocked[i]);
}
printf("\n");
}
return 0;
}
OUTPUT / Screenshots:
Other Algos Extra :
2) Code of Bankers Algo:
#include <stdio.h>
#include <stdbool.h>
int main() {
int n, m;
printf("Enter the number of processes: ");
scanf("%d", &n);
printf("Enter the number of resource types: ");
scanf("%d", &m);
int allocation[n][m], max[n][m], need[n][m], available[m];
bool finish[n];
printf("Enter allocation matrix:\n");
for (int i = 0; i < n; i++) {
for (int j = 0; j < m; j++) {
scanf("%d", &allocation[i][j]);
}
}
printf("Enter maximum matrix:\n");
for (int i = 0; i < n; i++) {
for (int j = 0; j < m; j++) {
scanf("%d", &max[i][j]);
}
}
printf("Enter available resources:\n");
for (int i = 0; i < m; i++) {
scanf("%d", &available[i]);
}
for (int i = 0; i < n; i++) {
for (int j = 0; j < m; j++) {
need[i][j] = max[i][j] - allocation[i][j];
}
}
for (int i = 0; i < n; i++) {
finish[i] = false;
}
bool deadlockExists = false;
int safeSequence[n], index = 0;
int work[m];
for (int i = 0; i < m; i++) {
work[i] = available[i];
}
while (true) {
bool found = false;
for (int i = 0; i < n; i++) {
if (!finish[i]) {
bool canProceed = true;
for (int j = 0; j < m; j++) {
if (need[i][j] > work[j]) {
canProceed = false;
break;
}
}
if (canProceed) {
for (int j = 0; j < m; j++) {
work[j] += allocation[i][j];
}
safeSequence[index++] = i;
finish[i] = true;
found = true;
}
}
}
if (!found) {
break;
}
}
for (int i = 0; i < n; i++) {
if (!finish[i]) {
deadlockExists = true;
break;
}
}
if (deadlockExists) {
printf("System is in a deadlock.\nProcesses involved in deadlock
are:\n");
for (int i = 0; i < n; i++) {
if (!finish[i]) {
printf("P%d ", i);
}
}
printf("\n");
} else {
printf("No deadlock detected. Safe sequence is:\n");
for (int i = 0; i < n; i++) {
printf("P%d ", safeSequence[i]);
}
printf("\n");
}
return 0;
}
OUTPUT / Screenshots: